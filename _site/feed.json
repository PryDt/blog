{
    "version": "https://jsonfeed.org/version/1",
    "title": "Pry's Blog",
    "home_page_url": "https://prydt.xyz/b/",
    "feed_url": "https://prydt.xyz/b/feed.json",
    "description": "It's a blog... what more can I say?",
    "icon": "https://prydt.xyz/b/apple-touch-icon.png",
    "favicon": "https://prydt.xyz/b/favicon.ico",
    "expired": false,
    
    "author":  {
        "name": "Pranoy Dutta",
        "url": "https://prydt.xyz",
        "avatar": null
    },
    
"items": [
    
        {
            "id": "https://prydt.xyz/b/2021/01/26/our-technology-dystopia.html",
            "title": "My TEDx Talk: Our Technology Dystopia and How to Survive in It",
            "summary": "A script of my TEDx talk.",
            "content_text": "Below is a copy of the script I used to record my TEDx talk which had to be recorded at my home (with my phone!) due to the COVID-19 epidemic. The talk was originally recorded on April 2nd or so and the video was released on June 5th, 2020. This was originally typed up in a Word Document and I have converted it into HTML via Pandoc to upload on to here. Also note, I had to cut out parts of the script, namely the part about the modern office, due to time restrictions for a TEDx talk so those will not appear in the video.Finally, a change that I would make now is to no longer encourage people to download AdNasium but rather Ublock Origin which I have found in practice to be far superior.Without further ado…Our Technology Dystopia and How to Survive in ItPranoy DuttaTexas Academy of Mathematics and ScienceScript of presentation at TEDxYouth@TAMS: https://www.youtube.com/watch?v=k5oTA8PjJ6sWe are living in a dystopia. A dystopia without the neon lights and synth-heavy soundtracks that we are used to seeing in movies but a dystopia that is no less dangerous and despotic. A bold claim, I know, but it is an increasingly accurate and justified description of our world today. Now, why do I think this? I have three reasons.We are living under the most surveillance in the history of the world.Surveillance- on and offline. Surveillance that endangers our freedoms. I’m sure you are aware of offline surveillance, but online surveillance is even more prevalent, less talked about, and less understood. How does online surveillance work? Well, most websites that are on the internet use behavior trackers like Google Analytics or alternatives, which allow both Google and the website owners to track every single small movement or click on a website. This type of unconventional yet abundant data gathered is called “Data exhaust”. Data exhaust is like the exhaust of a car, it is naturally produced by us, and we don’t really think about it even though exhaust, when produced in large quantities, is problematic. Data exhaust, after collection, is then free to be studied or sold. This data, while it may not seem like it, is extremely valuable, primarily because it is honest data. People really do click on things they are interested in, people really do “Google” things they really want to know about, and people enter far more personal data into a Google search box than they will ever reveal to some pollster. It is just the case that when given such large amounts of data, some of the most valuable insights are those that can be extrapolated without the person giving the information being explicit at all. Searches like “signs your spouse is cheating” or a search like “depression symptoms” are both types of searches that are common but are also very personal and filled to the brim with information about that person. Searching for “signs your spouse is cheating” clearly indicates that whoever searched this is probably suspicious of their significant other, and this person is admitting this to Google even though this is something that they might not admit to a close relative or friend. Searching for depression symptoms could mean the person searching this is feeling sad or someone in their life might be. Either way, it doesn’t matter what we as human beings can extrapolate from such queries because this process is automated. Using sophisticated machine learning algorithms, large internet companies with large amounts of data exhaust can automatically detect and “personalize” all sorts of services to manipulate people and generate profit. However, the problem is that we as humans don’t even understand what machine learning models are basing many predictions on as they are much more adept at detecting patterns of small details within troves of vast information than humans will ever be.Another common technique of data analysis that is done on data exhaust generated by every user of the internet unknowingly is A/B testing. Done by websites like Google, Instagram, Facebook, or any other big website you can think of, A/B testing divides the population of people viewing the site and it shows one group one version of the site, and the other group another version of the site. It is usually small changes, barely noticeable if you aren’t directly looking for them but these changes matter. There have been tons of studies that have been done by data scientists at large internet companies that show small changes to UI can have a large impact on the behavior of the average user.In a study done by Facebook scientists and published in Nature journal, Facebook, changing the UI of some users made those people more likely to vote in an election compared to the other group. The power of this type of large internet platform has led MIT Technology Review to call Facebook “The real presidential swing state.” This type of A/B testing is happening all around us frequently and has the power to manipulate us, to change our behavior to how companies or algorithms see fit. And that's not all, sites like Facebook, Twitter, or YouTube can seem enchanting in a unique way; “just one last video” you promise before you watch 12 more. This is because as Tristan Harris, author of Irresistible, puts it, “there are a thousand people on the other side of the screen whose job it is to break down the self-regulation you have.”We are in a New Age of Automation and Wealth InequalityThere is a new wave of automation coming soon. With the advent of artificial intelligence and with deep learning reaching new heights, many jobs can and will be replaced partially or fully by machine learning models. McKinsey &amp; Company posits that about 50% of all work activities are technically automatable just by adapting current technology and that 6 out of 10 current jobs in the world are composed of more than 30% of automatable tasks.McKinsey says that it is reasonable to believe that not only are many jobs going to be automated away but that in many jobs wages will stagnate or lower as a result as well.AI expert and author Kai-Fu Lee predicts that about 40% of jobs, both blue and white-collar, will be affected in a 15 to 25 year time frame. And this sort of large-scale shift of jobs, while uncertain, will disproportionately affect low-income workers.This will lead directly to increased wealth inequality and a sort of vicious cycle. Machine learning models require large amounts of data and processing power to be made and to constantly improve. This creates a moat around the business of creating AI. This gives a massive advantage to companies that already have such resources thus making them even more powerful. By creating superior products, these companies will get large audiences, thus providing them with more data to make their product even better and thus the barrier to entry of creating an AI company increases even more. Additionally, when large amounts of jobs get automated out of existence, this sort of wealth inequality grows, both in money and data. The wealthy will benefit from this sort of automation as it will increase productivity and require them to pay less wages. Remember, wealth inequality is a key factor in the power imbalance in many dystopias.We are in an era of widespread distraction.We live in a very distracted era. I’m sure you’ve seen the claim of how attention spans are getting shorter and the claims that those claims are false. My point is that regardless of how long or short human attention spans currently are, we are living in a world where distracting yourself (either intentionally or unintentionally) is one of the easiest things you can fall into the habit of doing. It is easier than ever to get distracted from one notification on your phone and before you know it 10 minutes have passed. This leads to doing what Cal Newport in his book Deep Work calls “shallow work.” Work that is done with less focus and concentration and leads to generally worse results in whatever form, like worse grades or fewer promotions, etc.Additionally, many ideas promoted today in the workplace seriously do not help to avoid distractions. Management trends like open offices, where every employee can see each other and have a beautiful clear view of the entire workspace as one large room, leads to it being easier to get distracted by someone else’s ringing phone or anything else that doesn’t pertain to you and yet is still able to hijack your focus. Similarly, professional obligations like checking email can easily become a large time sink if checked too often or if you put in the effort to respond to every email you get at that exact moment. Lastly, the elephant in the room, a social media account. Social media is like any other tool. It isn’t inherently good or bad. But to consider it a tool is slightly misleading because it is not just useful, it comes with the downside of having a built-in addiction engine that is engineered as well as any casino. When considering using social media, one must keep this in mind. Not only is it a surveillance machine that takes away your privacy, but it is also an amazing attention black hole if used normally.All of this combines to make our world into something that looks like a dystopia, with surveillance, coming automation, wealth inequality, as well as a distraction crisis. Any one of these things alone would be terrible enough and put together it seems even worse. But the world doesn’t have to be this way and we can certainly change it for the better if we work together.Here is my guide to survive in our modern dystopia:First, I’d like to show you all a few things you can go out and do today. Short term solutions that if you are watching this, several years in the future may or may not be outdated, but I’m sure this will still be useful to those working currently.I will first address online surveillance.Use Firefox (and add-ons)Web browsers are like a second operating system that everyone must use whether we like it or not. Firefox is the only major web browser in existence that is entirely open-source software and is written by Mozilla, a nonprofit. Other browsers like Chrome and Safari (the #1 and #2 browsers in terms of market share) have open source components but are not entirely open source so no one besides those at the company can read the source code and both are written by for-profit companies, namely Google and Apple. And even the open-source components of these browsers should raise suspicion.Google has a history of adding closed source components to their open-source browser Chromium which Chrome is based on. It was discovered (on the Debian bug tracking system on May 26, 2015) that Chromium downloaded a software component called “Chrome Hotword Shared Module.” It was a binary that was automatically downloaded and did not include any source code although it is easy to tell what it is just by the name.A hotword is a word or phrase like “Hey Google” or “Hey Siri” and so on and a hotword module is the code that listens for it. Put another way, Chromium, a supposedly open-source project by Google, automatically downloaded a chunk of code which is supposed to listen to everything said through the mic to detect a hotword.Using Firefox is your best bet currently and not just stock Firefox. I would recommend downloading these add-ons as well: AdNauseam and Privacy Badger. AdNauseam is an AdBlock with a twist. It blocks all the ads but also behind the scenes it clicks every single ad which effectively makes any attempt for a company to track and profile your preferences with ads useless. Privacy Badger is a 3rd party scripts blocker. It stops scripts like Google Analytics running on any of the websites you visit.Use DuckDuckGoUsing a proper privacy-respecting browser only gets you so far though if you continue to use a privacy disrespecting search engine. I don’t even need to tell you how much Google dominates the search engine market, so chances are you use it. I would highly recommend you instead switch to DuckDuckGo. Just change the search engine from Google to DuckDuckGo in the settings, and you can use it just as normal. DuckDuckGo is a search engine that respects your privacy and is just as easy to use as Google.Use a Linux distributionThis last short-term piece of advice is admittedly kind of not exactly short term and may seem at first extremely difficult for most people to do. But my argument is the same, what is the use in using a secure web browser and a secure search engine when you don’t use a privacy respecting operating system? Most people use Windows or OS X but both are proprietary and are more inefficient compared to Linux distributions like Ubuntu or ElementaryOS. One would think that open source OSes like a Linux distribution would be less secure than something like windows, right? But this is false, the open-source nature of these projects make it more secure as more eyes are looking at the source and contributing more bug reports and bug fixes. The open-source community is much more secure and trustworthy than proprietary software equivalents. Using an operating system like Ubuntu or Elementary OS is one of the most important steps to take to get out of the sphere of surveillance that has been built around society.Now onto long term solutions. All the above advice is subject to change. Ten years from now all of those pieces of software may be relics of the past. But what they all have in common is the shared philosophy of Free and Open Source Software (FOSS). Software is like a recipe to make food. Proprietary and closed source software is food that has already been prepared, and it doesn’t tell you what the recipe for the food is or even what the ingredients are. You wouldn’t trust an item of food at a grocery store if it didn’t tell you what the ingredients are, right? But everyday people trust companies to write programs which are essentially recipes for your computer to prepare with no knowledge at all about the recipe itself. You would trust a recipe in which you are given the recipe to look over yourself and an ingredients list to verify that it doesn’t contain anything that you don’t want, like poison or shards of glass. Free and Open Source software is software that gives you and anyone else who wants it access to the recipe and is hence more trustworthy and secure. If we want to take our privacy back into our hands and not give away all sorts of information to large corporations and governments the first step is to embrace open-source software and use it more often.Another type of technology that I think should be supported in the long term is encryption. Encryption has long been vilified by governments around the world, but it is one of the most valuable tools for protecting our freedoms and privacy. Export of cryptographic algorithms was outlawed in the US until 1992 and even now there are still restrictions on cryptography. In fact, in the past, the US government has gone as far as intentionally promoting technologies and algorithms that are insecure so that the government can crack what people believe to be secure channels. A good example of this is the US Clipper Chip, a chip promoted by the NSA that promised to secure voice and data messages but instead had a built-in backdoor for the government to unethically spy on its population. This isn’t even to mention the widespread surveillance that the NSA already does on its population as revealed by Edward Snowden. A common argument is that encryption helps criminals. Well, that is certainly true, but you know what else helps criminals? Smartphones and computers. It simply doesn’t make sense to outright ban something just because it helps criminals or terrorists as those same tools are the ones that can be protecting the privacy of every other law-abiding citizen.Also, to thrive in our current world, it is essential to be able to focus. To do “Deep Work.” It is the ability to focus on cognitively demanding tasks. Being able to cut out distractions from your life will cultivate this skill. One way is to avoid using electronic devices. Only use them when they are necessary. Take, for example, writing this talk. My initial stage of doing research was just me checking out and reading books from the library relevant to this subject. I was able to work deeply without distraction because I wasn’t spending as much time on the internet or allowing myself to get distracted into doing shallow work.Finally, I would like to ask everyone to spread the word, about our current problems, current solutions, and movements like open source software and how encryption is not just some evil tool used by terrorists. You know what one of the most common and dangerous aspects of a dystopia is? It's that most people don’t realize they are living in one. Thank you very much.Works CitedCorbyn, Zoe “Facebook Experiment Boosts US Voter Turnout.” Nature News, 12 September 2012, www.nature.com/news/facebook-experiment-boosts-us-voter-turnout-1.11401.Lee, Kai-Fu. AI Superpowers: China, Silicon Valley, and the New World Order. Mariner Books, 2019.Manyika, James, et al. “Jobs Lost, Jobs Gained: What the Future of Work Will Mean for Jobs,Skills, and Wages.” McKinsey &amp; Company, 11 May 2019, www.mckinsey.com/featured-insights/future-of-work/jobs-lost-jobs-gained-what-the-future-of-work-will-mean-for-jobs-skills-and-wages.Newport, Cal. Deep Work: Rules for Focused Success in a Distracted World. Grand Central Publishing, 2016.Stephens-Davidowitz, Seth, and Steven Pinker. Everybody Lies: What the Internet Can Tell Us about Who We Really Are. Bloomsbury, 2018.Stone, Chad, et al. “A Guide to Statistics on Historical Trends in Income Inequality.” Center onBudget and Policy Priorities, 11 Feb. 2020, www.cbpp.org/research/poverty-and-inequality/a-guide-to-statistics-on-historical-trends-in-income-inequality.",
            "content_html": "<p>Below is a copy of the script I used to record my TEDx talk which had to be recorded at my home (with my phone!) due to the COVID-19 epidemic. The talk was originally recorded on April 2nd or so and the video was released on June 5th, 2020. This was originally typed up in a Word Document and I have converted it into HTML via Pandoc to upload on to here. Also note, I had to cut out parts of the script, namely the part about the modern office, due to time restrictions for a TEDx talk so those will not appear in the video.</p><p>Finally, a change that I would make now is to no longer encourage people to download AdNasium but rather <a href=\"https://addons.mozilla.org/en-US/firefox/addon/ublock-origin\">Ublock Origin</a> which I have found in practice to be far superior.</p><p>Without further ado…</p><p style=\"text-align:center\"><strong>Our Technology Dystopia and How to Survive in It</strong></p><p style=\"text-align:center\">Pranoy Dutta</p><p style=\"text-align:center\">Texas Academy of Mathematics and Science</p><p style=\"text-align:center\">Script of presentation at <strong>TEDxYouth@TAMS</strong>: <a href=\"https://www.youtube.com/watch?v=k5oTA8PjJ6s\"><u>https://www.youtube.com/watch?v=k5oTA8PjJ6s</u></a></p><p>We are living in a dystopia. A dystopia without the neon lights and synth-heavy soundtracks that we are used to seeing in movies but a dystopia that is no less dangerous and despotic. A bold claim, I know, but it is an increasingly accurate and justified description of our world today. Now, why do I think this? I have three reasons.</p><ol type=\"1\"><li><p><u>We are living under the most surveillance in the history of the world.</u></p></li></ol><p>Surveillance- on and offline. Surveillance that endangers our freedoms. I’m sure you are aware of offline surveillance, but online surveillance is even more prevalent, less talked about, and less understood. How does online surveillance work? Well, most websites that are on the internet use behavior trackers like Google Analytics or alternatives, which allow both Google and the website owners to track every single small movement or click on a website. This type of unconventional yet abundant data gathered is called “Data exhaust”. Data exhaust is like the exhaust of a car, it is naturally produced by us, and we don’t really think about it even though exhaust, when produced in large quantities, is problematic. Data exhaust, after collection, is then free to be studied or sold. This data, while it may not seem like it, is extremely valuable, primarily because it is honest data. People really do click on things they are interested in, people really do “Google” things they really want to know about, and people enter far more personal data into a Google search box than they will ever reveal to some pollster. It is just the case that when given such large amounts of data, some of the most valuable insights are those that can be extrapolated without the person giving the information being explicit at all. Searches like “signs your spouse is cheating” or a search like “depression symptoms” are both types of searches that are common but are also very personal and filled to the brim with information about that person. Searching for “signs your spouse is cheating” clearly indicates that whoever searched this is probably suspicious of their significant other, and this person is admitting this to Google even though this is something that they might not admit to a close relative or friend. Searching for depression symptoms could mean the person searching this is feeling sad or someone in their life might be. Either way, it doesn’t matter what we as human beings can extrapolate from such queries because this process is automated. Using sophisticated machine learning algorithms, large internet companies with large amounts of data exhaust can automatically detect and “personalize” all sorts of services to manipulate people and generate profit. However, the problem is that we as humans don’t even understand what machine learning models are basing many predictions on as they are much more adept at detecting patterns of small details within troves of vast information than humans will ever be.</p><p>Another common technique of data analysis that is done on data exhaust generated by every user of the internet unknowingly is A/B testing. Done by websites like Google, Instagram, Facebook, or any other big website you can think of, A/B testing divides the population of people viewing the site and it shows one group one version of the site, and the other group another version of the site. It is usually small changes, barely noticeable if you aren’t directly looking for them but these changes matter. There have been tons of studies that have been done by data scientists at large internet companies that show small changes to UI can have a large impact on the behavior of the average user.</p><p><img src=\"/b/assets/imgs/tedx/image1.png\" alt=\"Graphical user interface Description automatically generated\" /></p><p>In a study done by Facebook scientists and published in Nature journal, Facebook, changing the UI of some users made those people more likely to vote in an election compared to the other group. The power of this type of large internet platform has led MIT Technology Review to call Facebook “<u>The real presidential swing state</u>.” This type of A/B testing is happening all around us frequently and has the power to manipulate us, to change our behavior to how companies or algorithms see fit. And that's not all, sites like Facebook, Twitter, or YouTube can seem enchanting in a unique way; “just one last video” you promise before you watch 12 more. This is because as Tristan Harris, author of Irresistible, puts it, “there are a thousand people on the other side of the screen whose job it is to break down the self-regulation you have.”</p><ol start=\"2\" type=\"1\"><li><p><u>We are in a New Age of Automation and Wealth Inequality</u></p></li></ol><p>There is a new wave of automation coming soon. With the advent of artificial intelligence and with deep learning reaching new heights, many jobs can and will be replaced partially or fully by machine learning models. McKinsey &amp; Company posits that about 50% of all work activities are technically automatable just by adapting current technology and that 6 out of 10 current jobs in the world are composed of more than 30% of automatable tasks.</p><p><img src=\"/b/assets/imgs/tedx/image2.png\" alt=\"A picture containing graphical user interface Description automatically generated\" /></p><p>McKinsey says that it is reasonable to believe that not only are many jobs going to be automated away but that in many jobs wages will stagnate or lower as a result as well.</p><p>AI expert and author Kai-Fu Lee predicts that about 40% of jobs, both blue and white-collar, will be affected in a 15 to 25 year time frame. And this sort of large-scale shift of jobs, while uncertain, will disproportionately affect low-income workers.</p><p>This will lead directly to increased wealth inequality and a sort of vicious cycle. Machine learning models require large amounts of data and processing power to be made and to constantly improve. This creates a moat around the business of creating AI. This gives a massive advantage to companies that already have such resources thus making them even more powerful. By creating superior products, these companies will get large audiences, thus providing them with more data to make their product even better and thus the barrier to entry of creating an AI company increases even more. Additionally, when large amounts of jobs get automated out of existence, this sort of wealth inequality grows, both in money and data. The wealthy will benefit from this sort of automation as it will increase productivity and require them to pay less wages. Remember, wealth inequality is a key factor in the power imbalance in many dystopias.</p><ol start=\"3\" type=\"1\"><li><p><u>We are in an era of widespread distraction.</u></p></li></ol><p>We live in a very distracted era. I’m sure you’ve seen the claim of how attention spans are getting shorter and the claims that those claims are false. My point is that regardless of how long or short human attention spans currently are, we are living in a world where distracting yourself (either intentionally or unintentionally) is one of the easiest things you can fall into the habit of doing. It is easier than ever to get distracted from one notification on your phone and before you know it 10 minutes have passed. This leads to doing what Cal Newport in his book Deep Work calls “shallow work.” Work that is done with less focus and concentration and leads to generally worse results in whatever form, like worse grades or fewer promotions, etc.</p><p>Additionally, many ideas promoted today in the workplace seriously do not help to avoid distractions. Management trends like open offices, where every employee can see each other and have a beautiful clear view of the entire workspace as one large room, leads to it being easier to get distracted by someone else’s ringing phone or anything else that doesn’t pertain to you and yet is still able to hijack your focus. Similarly, professional obligations like checking email can easily become a large time sink if checked too often or if you put in the effort to respond to every email you get at that exact moment. Lastly, the elephant in the room, a social media account. Social media is like any other tool. It isn’t inherently good or bad. But to consider it a tool is slightly misleading because it is not just useful, it comes with the downside of having a built-in addiction engine that is engineered as well as any casino. When considering using social media, one must keep this in mind. Not only is it a surveillance machine that takes away your privacy, but it is also an amazing attention black hole if used normally.</p><p>All of this combines to make our world into something that looks like a dystopia, with surveillance, coming automation, wealth inequality, as well as a distraction crisis. Any one of these things alone would be terrible enough and put together it seems even worse. But the world doesn’t have to be this way and we can certainly change it for the better if we work together.</p><p><strong>Here is my guide to survive in our modern dystopia:</strong></p><p>First, I’d like to show you all a few things you can go out and do today. Short term solutions that if you are watching this, several years in the future may or may not be outdated, but I’m sure this will still be useful to those working currently.</p><p>I will first address online surveillance.</p><p><u>Use Firefox (and add-ons)</u></p><p>Web browsers are like a second operating system that everyone must use whether we like it or not. Firefox is the only major web browser in existence that is entirely open-source software and is written by Mozilla, a nonprofit. Other browsers like Chrome and Safari (the #1 and #2 browsers in terms of market share) have open source components but are not entirely open source so no one besides those at the company can read the source code and both are written by for-profit companies, namely Google and Apple. And even the open-source components of these browsers should raise suspicion.</p><p><img src=\"/b/assets/imgs/tedx/image3.png\" alt=\"Text Description automatically generated\" /></p><p>Google has a history of adding closed source components to their open-source browser Chromium which Chrome is based on. It was discovered (on the Debian bug tracking system on May 26, 2015) that Chromium downloaded a software component called “Chrome Hotword Shared Module.” It was a binary that was automatically downloaded and did not include any source code although it is easy to tell what it is just by the name.</p><p>A hotword is a word or phrase like “Hey Google” or “Hey Siri” and so on and a hotword module is the code that listens for it. Put another way, Chromium, a supposedly open-source project by Google, automatically downloaded a chunk of code which is supposed to listen to everything said through the mic to detect a hotword.</p><p><img src=\"/b/assets/imgs/tedx/image4.png\" alt=\"Graphical user interface, text, application, email Description automatically generated\" /></p><p>Using Firefox is your best bet currently and not just stock Firefox. I would recommend downloading these add-ons as well: AdNauseam and Privacy Badger. AdNauseam is an AdBlock with a twist. It blocks all the ads but also behind the scenes it clicks every single ad which effectively makes any attempt for a company to track and profile your preferences with ads useless. Privacy Badger is a 3rd party scripts blocker. It stops scripts like Google Analytics running on any of the websites you visit.</p><p><img src=\"/b/assets/imgs/tedx/image5.png\" alt=\"Logo, company name Description automatically generated\" /></p><p><u>Use DuckDuckGo</u></p><p>Using a proper privacy-respecting browser only gets you so far though if you continue to use a privacy disrespecting search engine. I don’t even need to tell you how much Google dominates the search engine market, so chances are you use it. I would highly recommend you instead switch to DuckDuckGo. Just change the search engine from Google to DuckDuckGo in the settings, and you can use it just as normal. DuckDuckGo is a search engine that respects your privacy and is just as easy to use as Google.</p><p><u>Use a Linux distribution</u></p><p>This last short-term piece of advice is admittedly kind of not exactly short term and may seem at first extremely difficult for most people to do. But my argument is the same, what is the use in using a secure web browser and a secure search engine when you don’t use a privacy respecting operating system? Most people use Windows or OS X but both are proprietary and are more inefficient compared to Linux distributions like Ubuntu or ElementaryOS. One would think that open source OSes like a Linux distribution would be less secure than something like windows, right? But this is false, the open-source nature of these projects make it more secure as more eyes are looking at the source and contributing more bug reports and bug fixes. The open-source community is much more secure and trustworthy than proprietary software equivalents. Using an operating system like Ubuntu or Elementary OS is one of the most important steps to take to get out of the sphere of surveillance that has been built around society.</p><p><img src=\"/b/assets/imgs/tedx/image6.png\" alt=\"Graphical user interface, application Description automatically generated\" /></p><p>Now onto <u>long term solutions</u>. All the above advice is subject to change. Ten years from now all of those pieces of software may be relics of the past. But what they all have in common is the shared philosophy of Free and Open Source Software (FOSS). Software is like a recipe to make food. Proprietary and closed source software is food that has already been prepared, and it doesn’t tell you what the recipe for the food is or even what the ingredients are. You wouldn’t trust an item of food at a grocery store if it didn’t tell you what the ingredients are, right? But everyday people trust companies to write programs which are essentially recipes for your computer to prepare with no knowledge at all about the recipe itself. You would trust a recipe in which you are given the recipe to look over yourself and an ingredients list to verify that it doesn’t contain anything that you don’t want, like poison or shards of glass. Free and Open Source software is software that gives you and anyone else who wants it access to the recipe and is hence more trustworthy and secure. If we want to take our privacy back into our hands and not give away all sorts of information to large corporations and governments the first step is to embrace open-source software and use it more often.</p><p>Another type of technology that I think should be supported in the long term is encryption. Encryption has long been vilified by governments around the world, but it is one of the most valuable tools for protecting our freedoms and privacy. Export of cryptographic algorithms was outlawed in the US until 1992 and even now there are still restrictions on cryptography. In fact, in the past, the US government has gone as far as intentionally promoting technologies and algorithms that are insecure so that the government can crack what people believe to be secure channels. A good example of this is the US Clipper Chip, a chip promoted by the NSA that promised to secure voice and data messages but instead had a built-in backdoor for the government to unethically spy on its population. This isn’t even to mention the widespread surveillance that the NSA already does on its population as revealed by Edward Snowden. A common argument is that encryption helps criminals. Well, that is certainly true, but you know what else helps criminals? Smartphones and computers. It simply doesn’t make sense to outright ban something just because it helps criminals or terrorists as those same tools are the ones that can be protecting the privacy of every other law-abiding citizen.</p><p><img src=\"/b/assets/imgs/tedx/image7.png\" alt=\"A picture containing text, electronics Description automatically generated\" /></p><p>Also, to thrive in our current world, it is essential to be able to focus. To do “Deep Work.” It is the ability to focus on cognitively demanding tasks. Being able to cut out distractions from your life will cultivate this skill. One way is to avoid using electronic devices. Only use them when they are necessary. Take, for example, writing this talk. My initial stage of doing research was just me checking out and reading books from the library relevant to this subject. I was able to work deeply without distraction because I wasn’t spending as much time on the internet or allowing myself to get distracted into doing shallow work.</p><p>Finally, I would like to ask everyone to spread the word, about our current problems, current solutions, and movements like open source software and how encryption is not just some evil tool used by terrorists. You know what one of the most common and dangerous aspects of a dystopia is? It's that most people don’t realize they are living in one. Thank you very much.</p><p><strong>Works Cited</strong></p><p>Corbyn, Zoe “Facebook Experiment Boosts US Voter Turnout.” Nature News, 12 September 2012, www.nature.com/news/facebook-experiment-boosts-us-voter-turnout-1.11401.</p><p>Lee, Kai-Fu. AI Superpowers: China, Silicon Valley, and the New World Order. Mariner Books, 2019.</p><p>Manyika, James, et al. “Jobs Lost, Jobs Gained: What the Future of Work Will Mean for Jobs,</p><p>Skills, and Wages.” McKinsey &amp; Company, 11 May 2019, www.mckinsey.com/featured-insights/future-of-work/jobs-lost-jobs-gained-what-the-future-of-work-will-mean-for-jobs-skills-and-wages.</p><p>Newport, Cal. Deep Work: Rules for Focused Success in a Distracted World. Grand Central Publishing, 2016.</p><p>Stephens-Davidowitz, Seth, and Steven Pinker. Everybody Lies: What the Internet Can Tell Us about Who We Really Are. Bloomsbury, 2018.</p><p>Stone, Chad, et al. “A Guide to Statistics on Historical Trends in Income Inequality.” Center on</p><p>Budget and Policy Priorities, 11 Feb. 2020, www.cbpp.org/research/poverty-and-inequality/a-guide-to-statistics-on-historical-trends-in-income-inequality.</p>",
            "url": "https://prydt.xyz/b/2021/01/26/our-technology-dystopia.html",
            
            
            
            "tags": ["tedx","technology"],
            
            "date_published": "2021-01-26T00:00:00-06:00",
            "date_modified": "2021-01-26T00:00:00-06:00",
            
                "author":  {
                "name": "Pranoy Dutta",
                "url": "https://prydt.xyz",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://prydt.xyz/b/2020/07/18/trott-constants.html",
            "title": "Finding Trott Constants",
            "summary": "My work in finding possible Trott constants.",
            "content_text": "So I recently had the pleasure of joining a research group in the field of measure theory and an interesting problem was brought up. The problem was whether Trott constants existed if you used to typical notion of a continued fraction.  A Trott Constant is “a real number whose decimal digits are equal to the terms of its continued fraction.”  A continued fraction (CF) is a number in the form [a; x, y, z ...] which equals a + 1/(x+1/(y+1/(z...))).But Trott in his work used numbers from 0-9 for each term (x,y,z…) in the continued fraction which is not typical. Usually you would only use positive integers from 1 onward.The goal of this work is to try and find as many “pre-trott” constants as possible.A pre-trott constant is a continued fraction and decimal pair whose values match in decimal for all the digits in the terms of the continued fraction.Ex: [0; 3, 29, 5, 7] which matches 0.32957039824396362. It matches the first 5 digits which is all it needs to match for since that is the number of digits in the CF.So our first step is to construct a function that takes a continued fraction and computes it as a real number with a given amount or precision (decimal places accurate).We are using mpmath for arbitrary precision floating point arithmetic. Essentially, we can set the precision of the computation to be a certan number of decimal places but we shall set it at the minimum necessary as the larger the precision, the longer the computation.Additionally, note that our CF representation will just be a simple list of numbers. We will not store the zero as the beginning number does not really matter in either representation.Count DigitsThis is used to count the number of digits in our CF representation which will allow us to figure out how many decimal places to check for equivalence.from mpmath import mp, mpfdef count_digits(cf_list):    \"\"\"A Function to count amount of digits in a list of numbers    We will use this to figure out the amount of precision we want\"\"\"    total = 0    for num in cf_list:        while num &gt; 0: # note: numbers are guaranteed to be positive            num = num // 10            total = total + 1    return totalWe shall test the our count digits function.a = [100, 5, 7, 99]print(count_digits(a))print(a)output:7[100, 5, 7, 99]Continued Fraction to Real Number conversionHere we perform the conversion from CF to real number via repeated divisions.def cf_to_real(cf_list, precision):    with mp.extradps(precision+1):        curr = 0 # 0 is previous term        for item in cf_list[::-1]: # loop through list backwards            curr = 1 / mpf(item + curr)        return currcf = [3, 29, 5, 7]cf_to_real(cf, count_digits(cf) + 1)output:mpf('0.32957039824396362')Continued Fraction to Expected Trott Constant approximationHere we are calculating what the real number needs to equal if this CF is a trott constant approximate.def cf_to_trott_approx(cf_list):    return \"0.{}\".format(\"\".join(map(str,cf_list)))cf = [3, 29, 5, 7]cf_to_trott_approx(cf)output:'0.32957'Check if CF form has equal real and expected valuesHere we are checking if the real number representation of the CF matches the digits in the terms of the CF.def valid_trott(cf_list):    precision = count_digits(cf_list) + 2    with mp.extradps(precision+1):        real = str(cf_to_real(cf_list, precision))[:precision]        want = cf_to_trott_approx(cf_list)        # print(\"{} {}\".format(real, want)) # for debugging        return real == wantTesting the valid_trott function.print(valid_trott([3,29,5,7])) # trueprint(valid_trott([3,29,5,8])) # falseprint(valid_trott([3])) # trueprint(valid_trott([3,30])) # falseprint(valid_trott([3,29])) # trueprint(valid_trott([3, 333329])) # trueprint(valid_trott([3, 3333329])) # trueprint(valid_trott([3, 33333329])) # trueoutput:TrueFalseTrueFalseTrueTrueTrueTrueTesting for any possible Pre Trott constant 3 terms longThis is the general structure of what we wish to do to check if there are n-item long valid trott constants. However doing this many nested for-loops gets tedious and it is actually not possible to general to an nth degree so we must use a recursive technique known as backtracking.ITEM_MAX = 1000000# for-loop solution (NOT backtracking)for i in range(1, ITEM_MAX):    a = [i]    if valid_trott(a):        print(a)        for j in range(1, ITEM_MAX):            a = [i,j]            if valid_trott(a):                print(a)                for k in range(1, ITEM_MAX):                    a=[i,j,k]                    if valid_trott(a):                        print(a)output:[3][3, 29][3, 29, 5][3, 29, 54][3, 29, 545][3, 29, 5454][3, 29, 54545][3, 29, 545454][3, 329][3, 329, 9][3, 329, 95][3, 329, 959][3, 329, 9595][3, 329, 95951][3, 329, 959514][3, 3329][3, 3329, 9][3, 3329, 99][3, 3329, 995][3, 3329, 9959][3, 3329, 99599][3, 3329, 995995][3, 33329][3, 33329, 9][3, 33329, 99][3, 33329, 999][3, 33329, 9995][3, 33329, 99959][3, 33329, 999599][3, 333329][3, 333329, 9][3, 333329, 99][3, 333329, 999][3, 333329, 9999][3, 333329, 99996][3, 333329, 999960]Here we can see that the first term must be a 3 to continue, 10 works at first but immediately dies out. The second term also is quite interesting as it looks like it must be 29, 329, 3329, and so on.This is already a useful result in that we can generalize and say that we can find a pre trott constant that is equal up to any N. (If we wanted a pre trott that is equal to 20 digits we could just have [0; 3, 333333333333333329].)prev = 29 for i in range(2,20):    a = [3, prev + (3 * 10 ** i)]    prev = prev + (3 * 10 ** i)    if valid_trott(a):        print(a) # print only the valid approximationsoutput:[3, 329][3, 3329][3, 33329][3, 333329][3, 3333329][3, 33333329][3, 333333329][3, 3333333329][3, 33333333329][3, 333333333329][3, 3333333333329][3, 33333333333329][3, 333333333333329][3, 3333333333333329][3, 33333333333333329][3, 333333333333333329][3, 3333333333333333329]The above is just a way to show that the repeating 3s at the beginning are valid pre trotts.Backtracking Solution  backtracking is the best way to do a brute force for all permutations in a general case.Here we will take what we do in each of the for-loops in the code above and call this function recursively. I will set more limiting restrictions on this version as the above code actually does take a bit of time to run just for 3 items of in the range of [1, 1000000].def trott_backtracking(current_cf, count, max_items, max_size, file=None):    if count &lt; max_items:        valid = []        for a in range(1, max_size):            new_cf = current_cf + [a]            if valid_trott(new_cf):                valid.append(new_cf)        if valid:            for v in valid:                # These branches are still alive                print(\"VALID: {}\".format(str(v)), file=file)                trott_backtracking(v, count+1, max_items, max_size, file=file)with open(\"output1.txt\", \"w+\") as out:    trott_backtracking([], 0, 1000, 50, out)Since the output was long I moved it to another file but it can be seen in output1.txt.Now I just need to run this for much larger possible values.with open(\"output3.txt\", \"w+\") as out:    trott_backtracking([], 0, 1000, 10000, out)TODOThere are a few improvements I want to add to the code soon. Currently it is only using one process and hence only one of my CPU cores.  use multiprocessing module to parallelize code  figure out a faster way to check for decimal equality than to convert to a string?That’s all for now. – Pry (Pranoy Dutta)",
            "content_html": "<p>So I recently had the pleasure of joining a research group in the field of measure theory and an interesting problem was brought up. The problem was whether Trott constants existed if you used to typical notion of a continued fraction.</p><blockquote>  <p>A Trott Constant is “a real number whose decimal digits are equal to the terms of its continued fraction.”</p></blockquote><blockquote>  <p>A continued fraction (CF) is a number in the form <code class=\"highlighter-rouge\">[a; x, y, z ...]</code> which equals <code class=\"highlighter-rouge\">a + 1/(x+1/(y+1/(z...)))</code>.</p></blockquote><p>But Trott in his work used numbers from 0-9 for each term (x,y,z…) in the continued fraction which is not typical. Usually you would only use positive integers from 1 onward.</p><p>The goal of this work is to try and find as many “pre-trott” constants as possible.</p><p>A pre-trott constant is a continued fraction and decimal pair whose values match in decimal for all the digits in the terms of the continued fraction.</p><p>Ex: <code class=\"highlighter-rouge\">[0; 3, 29, 5, 7]</code> which matches <code class=\"highlighter-rouge\">0.32957039824396362</code>. It matches the first 5 digits which is all it needs to match for since that is the number of digits in the CF.</p><p>So our first step is to construct a function that takes a continued fraction and computes it as a real number with a given amount or precision (decimal places accurate).</p><p>We are using <code class=\"highlighter-rouge\">mpmath</code> for arbitrary precision floating point arithmetic. Essentially, we can set the precision of the computation to be a certan number of decimal places but we shall set it at the minimum necessary as the larger the precision, the longer the computation.</p><p>Additionally, note that our CF representation will just be a simple list of numbers. We will not store the zero as the beginning number does not really matter in either representation.</p><h3 id=\"count-digits\">Count Digits</h3><p>This is used to count the number of digits in our CF representation which will allow us to figure out how many decimal places to check for equivalence.</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">mpmath</span> <span class=\"kn\">import</span> <span class=\"n\">mp</span><span class=\"p\">,</span> <span class=\"n\">mpf</span><span class=\"k\">def</span> <span class=\"nf\">count_digits</span><span class=\"p\">(</span><span class=\"n\">cf_list</span><span class=\"p\">):</span>    <span class=\"s\">\"\"\"A Function to count amount of digits in a list of numbers    We will use this to figure out the amount of precision we want\"\"\"</span>    <span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>    <span class=\"k\">for</span> <span class=\"n\">num</span> <span class=\"ow\">in</span> <span class=\"n\">cf_list</span><span class=\"p\">:</span>        <span class=\"k\">while</span> <span class=\"n\">num</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"c1\"># note: numbers are guaranteed to be positive</span>            <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"n\">num</span> <span class=\"o\">//</span> <span class=\"mi\">10</span>            <span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"n\">total</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>    <span class=\"k\">return</span> <span class=\"n\">total</span></code></pre></div></div><p>We shall test the our count digits function.</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">99</span><span class=\"p\">]</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_digits</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">))</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span></code></pre></div></div><p>output:</p><pre><code class=\"language-commandline\">7[100, 5, 7, 99]</code></pre><h2 id=\"continued-fraction-to-real-number-conversion\">Continued Fraction to Real Number conversion</h2><p>Here we perform the conversion from CF to real number via repeated divisions.</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">cf_to_real</span><span class=\"p\">(</span><span class=\"n\">cf_list</span><span class=\"p\">,</span> <span class=\"n\">precision</span><span class=\"p\">):</span>    <span class=\"k\">with</span> <span class=\"n\">mp</span><span class=\"o\">.</span><span class=\"n\">extradps</span><span class=\"p\">(</span><span class=\"n\">precision</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">):</span>        <span class=\"n\">curr</span> <span class=\"o\">=</span> <span class=\"mi\">0</span> <span class=\"c1\"># 0 is previous term</span>        <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">cf_list</span><span class=\"p\">[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"c1\"># loop through list backwards</span>            <span class=\"n\">curr</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"o\">/</span> <span class=\"n\">mpf</span><span class=\"p\">(</span><span class=\"n\">item</span> <span class=\"o\">+</span> <span class=\"n\">curr</span><span class=\"p\">)</span>        <span class=\"k\">return</span> <span class=\"n\">curr</span></code></pre></div></div><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">cf</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">29</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]</span><span class=\"n\">cf_to_real</span><span class=\"p\">(</span><span class=\"n\">cf</span><span class=\"p\">,</span> <span class=\"n\">count_digits</span><span class=\"p\">(</span><span class=\"n\">cf</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span></code></pre></div></div><p>output:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mpf('0.32957039824396362')</code></pre></div></div><h2 id=\"continued-fraction-to-expected-trott-constant-approximation\">Continued Fraction to Expected Trott Constant approximation</h2><p>Here we are calculating what the real number needs to equal if this CF is a trott constant approximate.</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">cf_to_trott_approx</span><span class=\"p\">(</span><span class=\"n\">cf_list</span><span class=\"p\">):</span>    <span class=\"k\">return</span> <span class=\"s\">\"0.{}\"</span><span class=\"o\">.</span><span class=\"nb\">format</span><span class=\"p\">(</span><span class=\"s\">\"\"</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span><span class=\"n\">cf_list</span><span class=\"p\">)))</span></code></pre></div></div><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">cf</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">29</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]</span><span class=\"n\">cf_to_trott_approx</span><span class=\"p\">(</span><span class=\"n\">cf</span><span class=\"p\">)</span></code></pre></div></div><p>output:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>'0.32957'</code></pre></div></div><h2 id=\"check-if-cf-form-has-equal-real-and-expected-values\">Check if CF form has equal real and expected values</h2><p>Here we are checking if the real number representation of the CF matches the digits in the terms of the CF.</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">valid_trott</span><span class=\"p\">(</span><span class=\"n\">cf_list</span><span class=\"p\">):</span>    <span class=\"n\">precision</span> <span class=\"o\">=</span> <span class=\"n\">count_digits</span><span class=\"p\">(</span><span class=\"n\">cf_list</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">2</span>    <span class=\"k\">with</span> <span class=\"n\">mp</span><span class=\"o\">.</span><span class=\"n\">extradps</span><span class=\"p\">(</span><span class=\"n\">precision</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">):</span>        <span class=\"n\">real</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">cf_to_real</span><span class=\"p\">(</span><span class=\"n\">cf_list</span><span class=\"p\">,</span> <span class=\"n\">precision</span><span class=\"p\">))[:</span><span class=\"n\">precision</span><span class=\"p\">]</span>        <span class=\"n\">want</span> <span class=\"o\">=</span> <span class=\"n\">cf_to_trott_approx</span><span class=\"p\">(</span><span class=\"n\">cf_list</span><span class=\"p\">)</span>        <span class=\"c1\"># print(\"{} {}\".format(real, want)) # for debugging</span>        <span class=\"k\">return</span> <span class=\"n\">real</span> <span class=\"o\">==</span> <span class=\"n\">want</span></code></pre></div></div><p>Testing the <code class=\"highlighter-rouge\">valid_trott</code> function.</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">valid_trott</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">29</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">]))</span> <span class=\"c1\"># true</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">valid_trott</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">29</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">]))</span> <span class=\"c1\"># false</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">valid_trott</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">]))</span> <span class=\"c1\"># true</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">valid_trott</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">30</span><span class=\"p\">]))</span> <span class=\"c1\"># false</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">valid_trott</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">29</span><span class=\"p\">]))</span> <span class=\"c1\"># true</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">valid_trott</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">333329</span><span class=\"p\">]))</span> <span class=\"c1\"># true</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">valid_trott</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3333329</span><span class=\"p\">]))</span> <span class=\"c1\"># true</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">valid_trott</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">33333329</span><span class=\"p\">]))</span> <span class=\"c1\"># true</span></code></pre></div></div><p>output:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>TrueFalseTrueFalseTrueTrueTrueTrue</code></pre></div></div><h2 id=\"testing-for-any-possible-pre-trott-constant-3-terms-long\">Testing for any possible Pre Trott constant 3 terms long</h2><p>This is the general structure of what we wish to do to check if there are n-item long valid trott constants. However doing this many nested for-loops gets tedious and it is actually not possible to general to an nth degree so we must use a recursive technique known as backtracking.</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">ITEM_MAX</span> <span class=\"o\">=</span> <span class=\"mi\">1000000</span><span class=\"c1\"># for-loop solution (NOT backtracking)</span><span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ITEM_MAX</span><span class=\"p\">):</span>    <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>    <span class=\"k\">if</span> <span class=\"n\">valid_trott</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">):</span>        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>        <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ITEM_MAX</span><span class=\"p\">):</span>            <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">j</span><span class=\"p\">]</span>            <span class=\"k\">if</span> <span class=\"n\">valid_trott</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">):</span>                <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>                <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ITEM_MAX</span><span class=\"p\">):</span>                    <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">j</span><span class=\"p\">,</span><span class=\"n\">k</span><span class=\"p\">]</span>                    <span class=\"k\">if</span> <span class=\"n\">valid_trott</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">):</span>                        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span></code></pre></div></div><p>output:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[3][3, 29][3, 29, 5][3, 29, 54][3, 29, 545][3, 29, 5454][3, 29, 54545][3, 29, 545454][3, 329][3, 329, 9][3, 329, 95][3, 329, 959][3, 329, 9595][3, 329, 95951][3, 329, 959514][3, 3329][3, 3329, 9][3, 3329, 99][3, 3329, 995][3, 3329, 9959][3, 3329, 99599][3, 3329, 995995][3, 33329][3, 33329, 9][3, 33329, 99][3, 33329, 999][3, 33329, 9995][3, 33329, 99959][3, 33329, 999599][3, 333329][3, 333329, 9][3, 333329, 99][3, 333329, 999][3, 333329, 9999][3, 333329, 99996][3, 333329, 999960]</code></pre></div></div><p>Here we can see that the first term must be a 3 to continue, 10 works at first but immediately dies out. The second term also is quite interesting as it looks like it must be 29, 329, 3329, and so on.</p><p>This is already a useful result in that we can generalize and say that we can find a pre trott constant that is equal up to any N. (If we wanted a pre trott that is equal to 20 digits we could just have <code class=\"highlighter-rouge\">[0; 3, 333333333333333329]</code>.)</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"mi\">29</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">20</span><span class=\"p\">):</span>    <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">prev</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">3</span> <span class=\"o\">*</span> <span class=\"mi\">10</span> <span class=\"o\">**</span> <span class=\"n\">i</span><span class=\"p\">)]</span>    <span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">prev</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">3</span> <span class=\"o\">*</span> <span class=\"mi\">10</span> <span class=\"o\">**</span> <span class=\"n\">i</span><span class=\"p\">)</span>    <span class=\"k\">if</span> <span class=\"n\">valid_trott</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">):</span>        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"c1\"># print only the valid approximations</span></code></pre></div></div><p>output:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[3, 329][3, 3329][3, 33329][3, 333329][3, 3333329][3, 33333329][3, 333333329][3, 3333333329][3, 33333333329][3, 333333333329][3, 3333333333329][3, 33333333333329][3, 333333333333329][3, 3333333333333329][3, 33333333333333329][3, 333333333333333329][3, 3333333333333333329]</code></pre></div></div><p>The above is just a way to show that the repeating 3s at the beginning are valid pre trotts.</p><h2 id=\"backtracking-solution\">Backtracking Solution</h2><blockquote>  <p>backtracking is the best way to do a brute force for all permutations in a general case.</p></blockquote><p>Here we will take what we do in each of the for-loops in the code above and call this function recursively. I will set more limiting restrictions on this version as the above code actually does take a bit of time to run just for 3 items of in the range of <code class=\"highlighter-rouge\">[1, 1000000]</code>.</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">trott_backtracking</span><span class=\"p\">(</span><span class=\"n\">current_cf</span><span class=\"p\">,</span> <span class=\"n\">count</span><span class=\"p\">,</span> <span class=\"n\">max_items</span><span class=\"p\">,</span> <span class=\"n\">max_size</span><span class=\"p\">,</span> <span class=\"nb\">file</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>    <span class=\"k\">if</span> <span class=\"n\">count</span> <span class=\"o\">&lt;</span> <span class=\"n\">max_items</span><span class=\"p\">:</span>        <span class=\"n\">valid</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>        <span class=\"k\">for</span> <span class=\"n\">a</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">max_size</span><span class=\"p\">):</span>            <span class=\"n\">new_cf</span> <span class=\"o\">=</span> <span class=\"n\">current_cf</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">]</span>            <span class=\"k\">if</span> <span class=\"n\">valid_trott</span><span class=\"p\">(</span><span class=\"n\">new_cf</span><span class=\"p\">):</span>                <span class=\"n\">valid</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">new_cf</span><span class=\"p\">)</span>        <span class=\"k\">if</span> <span class=\"n\">valid</span><span class=\"p\">:</span>            <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">valid</span><span class=\"p\">:</span>                <span class=\"c1\"># These branches are still alive</span>                <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"VALID: {}\"</span><span class=\"o\">.</span><span class=\"nb\">format</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)),</span> <span class=\"nb\">file</span><span class=\"o\">=</span><span class=\"nb\">file</span><span class=\"p\">)</span>                <span class=\"n\">trott_backtracking</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">count</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">max_items</span><span class=\"p\">,</span> <span class=\"n\">max_size</span><span class=\"p\">,</span> <span class=\"nb\">file</span><span class=\"o\">=</span><span class=\"nb\">file</span><span class=\"p\">)</span></code></pre></div></div><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s\">\"output1.txt\"</span><span class=\"p\">,</span> <span class=\"s\">\"w+\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">out</span><span class=\"p\">:</span>    <span class=\"n\">trott_backtracking</span><span class=\"p\">([],</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"n\">out</span><span class=\"p\">)</span></code></pre></div></div><p>Since the output was long I moved it to another file but it can be seen in <code class=\"highlighter-rouge\">output1.txt</code>.</p><p>Now I just need to run this for much larger possible values.</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s\">\"output3.txt\"</span><span class=\"p\">,</span> <span class=\"s\">\"w+\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">out</span><span class=\"p\">:</span>    <span class=\"n\">trott_backtracking</span><span class=\"p\">([],</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">10000</span><span class=\"p\">,</span> <span class=\"n\">out</span><span class=\"p\">)</span></code></pre></div></div><h2 id=\"todo\">TODO</h2><p>There are a few improvements I want to add to the code soon. Currently it is only using one process and hence only one of my CPU cores.</p><ul class=\"task-list\">  <li class=\"task-list-item\"><input type=\"checkbox\" class=\"task-list-item-checkbox\" disabled=\"disabled\" />use <code class=\"highlighter-rouge\">multiprocessing</code> module to parallelize code</li>  <li class=\"task-list-item\"><input type=\"checkbox\" class=\"task-list-item-checkbox\" disabled=\"disabled\" />figure out a faster way to check for decimal equality than to convert to a string?</li></ul><p>That’s all for now. – Pry (Pranoy Dutta)</p>",
            "url": "https://prydt.xyz/b/2020/07/18/trott-constants.html",
            
            
            
            "tags": ["math","research"],
            
            "date_published": "2020-07-18T00:00:00-05:00",
            "date_modified": "2020-07-18T00:00:00-05:00",
            
                "author":  {
                "name": "Pranoy Dutta",
                "url": "https://prydt.xyz",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://prydt.xyz/b/2020/07/12/breakfast-of-champions.html",
            "title": "Breakfast of Champions Review",
            "summary": "My thoughts on a Kurt Vonnegut Novel.",
            "content_text": "I haven’t been reading much lately.But I did finish Breakfast of Champions by Kurt Vonnegut finally and it was an interesting novel.I’ve been a fan of his work for a while already and loved Slaughterhouse Five and The Sirens of Titan both of which were unconventional sci-fi stories.Breakfast of Champions on the other hand is a more down to Earth novel but still has many distinct qualities of Vonnegut’s writing peppered in.The story revolves around Kilgore Trout (a sci-fi author) and as such is jam packed with 1-page descriptions of books that Trout had written.The story focuses on the build up of a single event: a mentally ill man finally snaps because of a solipsistic Trout novel and goes on a rampage.It is less about the event but about the surrounding characters and their environment; Vonnegut describes the local high schools in the area, the adult correction facility which many African Americans and “gays” are sent to.Vonnegut describes American in its glory and folly, a land of freedom and opportunity for some. The most sad thing about the novel is that while the novel was published in 1973, all of Vonnegut’s criticisms of America hold true more than ever. Racism, sexism, and inequality are all still large problems that need fixing in 2020. Overall I would say the satrical and witty comedy is worth a read and still ends with a touch of hope as it shows that even a single person (Kilgore Trout in this case), can cause change in magnitudes.Rating: 7/10, not my favorite Vonnegut book but definitely worth your time.– pry",
            "content_html": "<p>I haven’t been reading much lately.But I did finish Breakfast of Champions by Kurt Vonnegut finally and it was an interesting novel.I’ve been a fan of his work for a while already and loved Slaughterhouse Five and The Sirens of Titan both of which were unconventional sci-fi stories.</p><p>Breakfast of Champions on the other hand is a more down to Earth novel but still has many distinct qualities of Vonnegut’s writing peppered in.The story revolves around Kilgore Trout (a sci-fi author) and as such is jam packed with 1-page descriptions of books that Trout had written.</p><p>The story focuses on the build up of a single event: a mentally ill man finally snaps because of a solipsistic Trout novel and goes on a rampage.It is less about the event but about the surrounding characters and their environment; Vonnegut describes the local high schools in the area, the adult correction facility which many African Americans and “gays” are sent to.</p><p>Vonnegut describes American in its glory and folly, a land of freedom and opportunity for some. The most sad thing about the novel is that while the novel was published in 1973, all of Vonnegut’s criticisms of America hold true more than ever. Racism, sexism, and inequality are all still large problems that need fixing in 2020. Overall I would say the satrical and witty comedy is worth a read and still ends with a touch of hope as it shows that even a single person (Kilgore Trout in this case), can cause change in magnitudes.</p><p>Rating: 7/10, not my favorite Vonnegut book but definitely worth your time.</p><p>– pry</p>",
            "url": "https://prydt.xyz/b/2020/07/12/breakfast-of-champions.html",
            
            
            
            
            
            "date_published": "2020-07-12T00:00:00-05:00",
            "date_modified": "2020-07-12T00:00:00-05:00",
            
                "author":  {
                "name": "Pranoy Dutta",
                "url": "https://prydt.xyz",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://prydt.xyz/b/2020/06/16/installing-spike.html",
            "title": "Installing the Spike RISC-V Simulator",
            "summary": "How to install Spike on a Linux distro",
            "content_text": "Spike is a RISC-V Simulator. Here are the steps to installing Spike from source for 32bit simulation.Dependencies:  Device Tree Compiler# Arch Linuxsudo pacman -S dtc# Ubuntu / Debiansudo apt install device-tree-compilerInstalling SpikeMake a new directory for Spikemkdir RISCVcd RISCVClone the repos for the RISCV GNU toolchain, proxy kernel (pk), and Spike itselfgit clone --recursive https://github.com/riscv/riscv-gnu-toolchaingit clone https://github.com/riscv/riscv-pkgit clone https://github.com/riscv/riscv-isa-simSet environment variables (preferably move these commands into bashrc, zshrc, or something similar)export RISCV=/path/from/home/to/RISCVexport PATH=$PATH:$RISCV/binBuild the toolchain (this will take a while so make some tea or something)cd riscv-gnu-toolchainmkdir buildcd build../configure --prefix=$RISCV --with-arch=rv32imakeNow, to build the Proxy Kernelcd ../riscv-pkmkdir buildcd build../configure --prefix=$RISCV --host=riscv32-unknown-elfmakemake installFinally to build Spikecd ../riscv-isa-simmkdir buildcd build../configure --prefix=$RISCV --enable-histogrammakemake installYou are done!! To test if your install is working correctly use the following:riscv32-unknown-elf-gcc helloworld.c # where helloworld.c is any C programRISCV/riscv-isa-sim/build/spike --isa=RV32IMAC RISCV/riscv-pk/build/pk a.out",
            "content_html": "<p>Spike is a RISC-V Simulator. Here are the steps to installing Spike from source for 32bit simulation.</p><p>Dependencies:</p><ul>  <li>Device Tree Compiler</li></ul><pre><code class=\"language-commandline\"># Arch Linuxsudo pacman -S dtc# Ubuntu / Debiansudo apt install device-tree-compiler</code></pre><p>Installing Spike</p><p>Make a new directory for Spike</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mkdir RISCVcd RISCV</code></pre></div></div><p>Clone the repos for the RISCV GNU toolchain, proxy kernel (pk), and Spike itself</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git clone --recursive https://github.com/riscv/riscv-gnu-toolchaingit clone https://github.com/riscv/riscv-pkgit clone https://github.com/riscv/riscv-isa-sim</code></pre></div></div><p>Set environment variables (preferably move these commands into bashrc, zshrc, or something similar)</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>export RISCV=/path/from/home/to/RISCVexport PATH=$PATH:$RISCV/bin</code></pre></div></div><p>Build the toolchain (this will take a while so make some tea or something)</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>cd riscv-gnu-toolchainmkdir buildcd build../configure --prefix=$RISCV --with-arch=rv32imake</code></pre></div></div><p>Now, to build the Proxy Kernel</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>cd ../riscv-pkmkdir buildcd build../configure --prefix=$RISCV --host=riscv32-unknown-elfmakemake install</code></pre></div></div><p>Finally to build Spike</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>cd ../riscv-isa-simmkdir buildcd build../configure --prefix=$RISCV --enable-histogrammakemake install</code></pre></div></div><p>You are done!! To test if your install is working correctly use the following:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>riscv32-unknown-elf-gcc helloworld.c # where helloworld.c is any C programRISCV/riscv-isa-sim/build/spike --isa=RV32IMAC RISCV/riscv-pk/build/pk a.out</code></pre></div></div>",
            "url": "https://prydt.xyz/b/2020/06/16/installing-spike.html",
            
            
            
            "tags": ["riscv","linux"],
            
            "date_published": "2020-06-16T00:00:00-05:00",
            "date_modified": "2020-06-16T00:00:00-05:00",
            
                "author":  {
                "name": "Pranoy Dutta",
                "url": "https://prydt.xyz",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://prydt.xyz/b/2020/05/31/making-a-blog.html",
            "title": "Introductions | Making a Blog!",
            "summary": "An Introduction",
            "content_text": "I’m committing to writing a blog. This may or may not be my 3rd attempt and I’m just going to go and stick with it. I think that’s the best course of action. Previously, I was too caught up with what static site generator to use or exactly what to post and this time I’m just sticking with something basic and will continue.My set up for blogging is rather simple. I’m using Jekyll which is not the newest or flashiest static site generator but it gets the job done. The theme I am using is called Sidey and I personally think it looks amazing.I suppose that’s it for now. This is just the first post.– pry",
            "content_html": "<p>I’m committing to writing a blog. This may or may not be my 3rd attempt and I’m just going to go and stick with it. I think that’s the best course of action. Previously, I was too caught up with what static site generator to use or exactly what to post and this time I’m just sticking with something basic and will continue.</p><p>My set up for blogging is rather simple. I’m using <a href=\"https://jekyllrb.com/\">Jekyll</a> which is not the newest or flashiest static site generator but it gets the job done. The theme I am using is called <a href=\"https://github.com/ronv/sidey\">Sidey</a> and I personally think it looks amazing.</p><p>I suppose that’s it for now. This is just the first post.</p><p>– pry</p>",
            "url": "https://prydt.xyz/b/2020/05/31/making-a-blog.html",
            
            
            
            "tags": ["blogging","jekyll"],
            
            "date_published": "2020-05-31T00:00:00-05:00",
            "date_modified": "2020-05-31T00:00:00-05:00",
            
                "author":  {
                "name": "Pranoy Dutta",
                "url": "https://prydt.xyz",
                "avatar": null
                }
                
            
        }
    
    ]
}