{
    "version": "https://jsonfeed.org/version/1",
    "title": "Pry's Blog",
    "home_page_url": "https://prydt.xyz/b/",
    "feed_url": "https://prydt.xyz/b/feed.json",
    "description": "It's a blog... what more can I say?",
    "icon": "https://prydt.xyz/b/apple-touch-icon.png",
    "favicon": "https://prydt.xyz/b/favicon.ico",
    "expired": false,
    
    "author":  {
        "name": "Pranoy Dutta",
        "url": "https://prydt.xyz",
        "avatar": null
    },
    
"items": [
    
        {
            "id": "https://prydt.xyz/b/2020/07/18/trott-constants.html",
            "title": "Finding Trott Constants",
            "summary": "My work in finding possible Trott constants.",
            "content_text": "So I recently had the pleasure of joining a research group in the field of measure theory and an interesting problem was brought up. The problem was whether Trott constants existed if you used to typical notion of a continued fraction.  A Trott Constant is “a real number whose decimal digits are equal to the terms of its continued fraction.”  A continued fraction (CF) is a number in the form [a; x, y, z ...] which equals a + 1/(x+1/(y+1/(z...))).But Trott in his work used numbers from 0-9 for each term (x,y,z…) in the continued fraction which is not typical. Usually you would only use positive integers from 1 onward.The goal of this work is to try and find as many “pre-trott” constants as possible.A pre-trott constant is a continued fraction and decimal pair whose values match in decimal for all the digits in the terms of the continued fraction.Ex: [0; 3, 29, 5, 7] which matches 0.32957039824396362. It matches the first 5 digits which is all it needs to match for since that is the number of digits in the CF.So our first step is to construct a function that takes a continued fraction and computes it as a real number with a given amount or precision (decimal places accurate).We are using mpmath for arbitrary precision floating point arithmetic. Essentially, we can set the precision of the computation to be a certan number of decimal places but we shall set it at the minimum necessary as the larger the precision, the longer the computation.Additionally, note that our CF representation will just be a simple list of numbers. We will not store the zero as the beginning number does not really matter in either representation.Count DigitsThis is used to count the number of digits in our CF representation which will allow us to figure out how many decimal places to check for equivalence.from mpmath import mp, mpfdef count_digits(cf_list):    \"\"\"A Function to count amount of digits in a list of numbers    We will use this to figure out the amount of precision we want\"\"\"    total = 0    for num in cf_list:        while num &gt; 0: # note: numbers are guaranteed to be positive            num = num // 10            total = total + 1    return totalWe shall test the our count digits function.a = [100, 5, 7, 99]print(count_digits(a))print(a)output:7[100, 5, 7, 99]Continued Fraction to Real Number conversionHere we perform the conversion from CF to real number via repeated divisions.def cf_to_real(cf_list, precision):    with mp.extradps(precision+1):        curr = 0 # 0 is previous term        for item in cf_list[::-1]: # loop through list backwards            curr = 1 / mpf(item + curr)        return currcf = [3, 29, 5, 7]cf_to_real(cf, count_digits(cf) + 1)output:mpf('0.32957039824396362')Continued Fraction to Expected Trott Constant approximationHere we are calculating what the real number needs to equal if this CF is a trott constant approximate.def cf_to_trott_approx(cf_list):    return \"0.{}\".format(\"\".join(map(str,cf_list)))cf = [3, 29, 5, 7]cf_to_trott_approx(cf)output:'0.32957'Check if CF form has equal real and expected valuesHere we are checking if the real number representation of the CF matches the digits in the terms of the CF.def valid_trott(cf_list):    precision = count_digits(cf_list) + 2    with mp.extradps(precision+1):        real = str(cf_to_real(cf_list, precision))[:precision]        want = cf_to_trott_approx(cf_list)        # print(\"{} {}\".format(real, want)) # for debugging        return real == wantTesting the valid_trott function.print(valid_trott([3,29,5,7])) # trueprint(valid_trott([3,29,5,8])) # falseprint(valid_trott([3])) # trueprint(valid_trott([3,30])) # falseprint(valid_trott([3,29])) # trueprint(valid_trott([3, 333329])) # trueprint(valid_trott([3, 3333329])) # trueprint(valid_trott([3, 33333329])) # trueoutput:TrueFalseTrueFalseTrueTrueTrueTrueTesting for any possible Pre Trott constant 3 terms longThis is the general structure of what we wish to do to check if there are n-item long valid trott constants. However doing this many nested for-loops gets tedious and it is actually not possible to general to an nth degree so we must use a recursive technique known as backtracking.ITEM_MAX = 1000000# for-loop solution (NOT backtracking)for i in range(1, ITEM_MAX):    a = [i]    if valid_trott(a):        print(a)        for j in range(1, ITEM_MAX):            a = [i,j]            if valid_trott(a):                print(a)                for k in range(1, ITEM_MAX):                    a=[i,j,k]                    if valid_trott(a):                        print(a)output:[3][3, 29][3, 29, 5][3, 29, 54][3, 29, 545][3, 29, 5454][3, 29, 54545][3, 29, 545454][3, 329][3, 329, 9][3, 329, 95][3, 329, 959][3, 329, 9595][3, 329, 95951][3, 329, 959514][3, 3329][3, 3329, 9][3, 3329, 99][3, 3329, 995][3, 3329, 9959][3, 3329, 99599][3, 3329, 995995][3, 33329][3, 33329, 9][3, 33329, 99][3, 33329, 999][3, 33329, 9995][3, 33329, 99959][3, 33329, 999599][3, 333329][3, 333329, 9][3, 333329, 99][3, 333329, 999][3, 333329, 9999][3, 333329, 99996][3, 333329, 999960]Here we can see that the first term must be a 3 to continue, 10 works at first but immediately dies out. The second term also is quite interesting as it looks like it must be 29, 329, 3329, and so on.This is already a useful result in that we can generalize and say that we can find a pre trott constant that is equal up to any N. (If we wanted a pre trott that is equal to 20 digits we could just have [0; 3, 333333333333333329].)prev = 29 for i in range(2,20):    a = [3, prev + (3 * 10 ** i)]    prev = prev + (3 * 10 ** i)    if valid_trott(a):        print(a) # print only the valid approximationsoutput:[3, 329][3, 3329][3, 33329][3, 333329][3, 3333329][3, 33333329][3, 333333329][3, 3333333329][3, 33333333329][3, 333333333329][3, 3333333333329][3, 33333333333329][3, 333333333333329][3, 3333333333333329][3, 33333333333333329][3, 333333333333333329][3, 3333333333333333329]The above is just a way to show that the repeating 3s at the beginning are valid pre trotts.Backtracking Solution  backtracking is the best way to do a brute force for all permutations in a general case.Here we will take what we do in each of the for-loops in the code above and call this function recursively. I will set more limiting restrictions on this version as the above code actually does take a bit of time to run just for 3 items of in the range of [1, 1000000].def trott_backtracking(current_cf, count, max_items, max_size, file=None):    if count &lt; max_items:        valid = []        for a in range(1, max_size):            new_cf = current_cf + [a]            if valid_trott(new_cf):                valid.append(new_cf)        if valid:            for v in valid:                # These branches are still alive                print(\"VALID: {}\".format(str(v)), file=file)                trott_backtracking(v, count+1, max_items, max_size, file=file)with open(\"output1.txt\", \"w+\") as out:    trott_backtracking([], 0, 1000, 50, out)Since the output was long I moved it to another file but it can be seen in output1.txt.Now I just need to run this for much larger possible values.with open(\"output3.txt\", \"w+\") as out:    trott_backtracking([], 0, 1000, 10000, out)TODOThere are a few improvements I want to add to the code soon. Currently it is only using one process and hence only one of my CPU cores.  use multiprocessing module to parallelize code  figure out a faster way to check for decimal equality than to convert to a string?That’s all for now. – Pry (Pranoy Dutta)",
            "content_html": "<p>So I recently had the pleasure of joining a research group in the field of measure theory and an interesting problem was brought up. The problem was whether Trott constants existed if you used to typical notion of a continued fraction.</p><blockquote>  <p>A Trott Constant is “a real number whose decimal digits are equal to the terms of its continued fraction.”</p></blockquote><blockquote>  <p>A continued fraction (CF) is a number in the form <code class=\"highlighter-rouge\">[a; x, y, z ...]</code> which equals <code class=\"highlighter-rouge\">a + 1/(x+1/(y+1/(z...)))</code>.</p></blockquote><p>But Trott in his work used numbers from 0-9 for each term (x,y,z…) in the continued fraction which is not typical. Usually you would only use positive integers from 1 onward.</p><p>The goal of this work is to try and find as many “pre-trott” constants as possible.</p><p>A pre-trott constant is a continued fraction and decimal pair whose values match in decimal for all the digits in the terms of the continued fraction.</p><p>Ex: <code class=\"highlighter-rouge\">[0; 3, 29, 5, 7]</code> which matches <code class=\"highlighter-rouge\">0.32957039824396362</code>. It matches the first 5 digits which is all it needs to match for since that is the number of digits in the CF.</p><p>So our first step is to construct a function that takes a continued fraction and computes it as a real number with a given amount or precision (decimal places accurate).</p><p>We are using <code class=\"highlighter-rouge\">mpmath</code> for arbitrary precision floating point arithmetic. Essentially, we can set the precision of the computation to be a certan number of decimal places but we shall set it at the minimum necessary as the larger the precision, the longer the computation.</p><p>Additionally, note that our CF representation will just be a simple list of numbers. We will not store the zero as the beginning number does not really matter in either representation.</p><h3 id=\"count-digits\">Count Digits</h3><p>This is used to count the number of digits in our CF representation which will allow us to figure out how many decimal places to check for equivalence.</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">mpmath</span> <span class=\"kn\">import</span> <span class=\"n\">mp</span><span class=\"p\">,</span> <span class=\"n\">mpf</span><span class=\"k\">def</span> <span class=\"nf\">count_digits</span><span class=\"p\">(</span><span class=\"n\">cf_list</span><span class=\"p\">):</span>    <span class=\"s\">\"\"\"A Function to count amount of digits in a list of numbers    We will use this to figure out the amount of precision we want\"\"\"</span>    <span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>    <span class=\"k\">for</span> <span class=\"n\">num</span> <span class=\"ow\">in</span> <span class=\"n\">cf_list</span><span class=\"p\">:</span>        <span class=\"k\">while</span> <span class=\"n\">num</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"c1\"># note: numbers are guaranteed to be positive</span>            <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"n\">num</span> <span class=\"o\">//</span> <span class=\"mi\">10</span>            <span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"n\">total</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>    <span class=\"k\">return</span> <span class=\"n\">total</span></code></pre></div></div><p>We shall test the our count digits function.</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">99</span><span class=\"p\">]</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_digits</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">))</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span></code></pre></div></div><p>output:</p><pre><code class=\"language-commandline\">7[100, 5, 7, 99]</code></pre><h2 id=\"continued-fraction-to-real-number-conversion\">Continued Fraction to Real Number conversion</h2><p>Here we perform the conversion from CF to real number via repeated divisions.</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">cf_to_real</span><span class=\"p\">(</span><span class=\"n\">cf_list</span><span class=\"p\">,</span> <span class=\"n\">precision</span><span class=\"p\">):</span>    <span class=\"k\">with</span> <span class=\"n\">mp</span><span class=\"o\">.</span><span class=\"n\">extradps</span><span class=\"p\">(</span><span class=\"n\">precision</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">):</span>        <span class=\"n\">curr</span> <span class=\"o\">=</span> <span class=\"mi\">0</span> <span class=\"c1\"># 0 is previous term</span>        <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">cf_list</span><span class=\"p\">[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"c1\"># loop through list backwards</span>            <span class=\"n\">curr</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"o\">/</span> <span class=\"n\">mpf</span><span class=\"p\">(</span><span class=\"n\">item</span> <span class=\"o\">+</span> <span class=\"n\">curr</span><span class=\"p\">)</span>        <span class=\"k\">return</span> <span class=\"n\">curr</span></code></pre></div></div><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">cf</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">29</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]</span><span class=\"n\">cf_to_real</span><span class=\"p\">(</span><span class=\"n\">cf</span><span class=\"p\">,</span> <span class=\"n\">count_digits</span><span class=\"p\">(</span><span class=\"n\">cf</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span></code></pre></div></div><p>output:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mpf('0.32957039824396362')</code></pre></div></div><h2 id=\"continued-fraction-to-expected-trott-constant-approximation\">Continued Fraction to Expected Trott Constant approximation</h2><p>Here we are calculating what the real number needs to equal if this CF is a trott constant approximate.</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">cf_to_trott_approx</span><span class=\"p\">(</span><span class=\"n\">cf_list</span><span class=\"p\">):</span>    <span class=\"k\">return</span> <span class=\"s\">\"0.{}\"</span><span class=\"o\">.</span><span class=\"nb\">format</span><span class=\"p\">(</span><span class=\"s\">\"\"</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span><span class=\"n\">cf_list</span><span class=\"p\">)))</span></code></pre></div></div><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">cf</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">29</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]</span><span class=\"n\">cf_to_trott_approx</span><span class=\"p\">(</span><span class=\"n\">cf</span><span class=\"p\">)</span></code></pre></div></div><p>output:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>'0.32957'</code></pre></div></div><h2 id=\"check-if-cf-form-has-equal-real-and-expected-values\">Check if CF form has equal real and expected values</h2><p>Here we are checking if the real number representation of the CF matches the digits in the terms of the CF.</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">valid_trott</span><span class=\"p\">(</span><span class=\"n\">cf_list</span><span class=\"p\">):</span>    <span class=\"n\">precision</span> <span class=\"o\">=</span> <span class=\"n\">count_digits</span><span class=\"p\">(</span><span class=\"n\">cf_list</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">2</span>    <span class=\"k\">with</span> <span class=\"n\">mp</span><span class=\"o\">.</span><span class=\"n\">extradps</span><span class=\"p\">(</span><span class=\"n\">precision</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">):</span>        <span class=\"n\">real</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">cf_to_real</span><span class=\"p\">(</span><span class=\"n\">cf_list</span><span class=\"p\">,</span> <span class=\"n\">precision</span><span class=\"p\">))[:</span><span class=\"n\">precision</span><span class=\"p\">]</span>        <span class=\"n\">want</span> <span class=\"o\">=</span> <span class=\"n\">cf_to_trott_approx</span><span class=\"p\">(</span><span class=\"n\">cf_list</span><span class=\"p\">)</span>        <span class=\"c1\"># print(\"{} {}\".format(real, want)) # for debugging</span>        <span class=\"k\">return</span> <span class=\"n\">real</span> <span class=\"o\">==</span> <span class=\"n\">want</span></code></pre></div></div><p>Testing the <code class=\"highlighter-rouge\">valid_trott</code> function.</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">valid_trott</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">29</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">]))</span> <span class=\"c1\"># true</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">valid_trott</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">29</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">]))</span> <span class=\"c1\"># false</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">valid_trott</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">]))</span> <span class=\"c1\"># true</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">valid_trott</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">30</span><span class=\"p\">]))</span> <span class=\"c1\"># false</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">valid_trott</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">29</span><span class=\"p\">]))</span> <span class=\"c1\"># true</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">valid_trott</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">333329</span><span class=\"p\">]))</span> <span class=\"c1\"># true</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">valid_trott</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3333329</span><span class=\"p\">]))</span> <span class=\"c1\"># true</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">valid_trott</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">33333329</span><span class=\"p\">]))</span> <span class=\"c1\"># true</span></code></pre></div></div><p>output:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>TrueFalseTrueFalseTrueTrueTrueTrue</code></pre></div></div><h2 id=\"testing-for-any-possible-pre-trott-constant-3-terms-long\">Testing for any possible Pre Trott constant 3 terms long</h2><p>This is the general structure of what we wish to do to check if there are n-item long valid trott constants. However doing this many nested for-loops gets tedious and it is actually not possible to general to an nth degree so we must use a recursive technique known as backtracking.</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">ITEM_MAX</span> <span class=\"o\">=</span> <span class=\"mi\">1000000</span><span class=\"c1\"># for-loop solution (NOT backtracking)</span><span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ITEM_MAX</span><span class=\"p\">):</span>    <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>    <span class=\"k\">if</span> <span class=\"n\">valid_trott</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">):</span>        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>        <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ITEM_MAX</span><span class=\"p\">):</span>            <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">j</span><span class=\"p\">]</span>            <span class=\"k\">if</span> <span class=\"n\">valid_trott</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">):</span>                <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>                <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ITEM_MAX</span><span class=\"p\">):</span>                    <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">j</span><span class=\"p\">,</span><span class=\"n\">k</span><span class=\"p\">]</span>                    <span class=\"k\">if</span> <span class=\"n\">valid_trott</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">):</span>                        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span></code></pre></div></div><p>output:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[3][3, 29][3, 29, 5][3, 29, 54][3, 29, 545][3, 29, 5454][3, 29, 54545][3, 29, 545454][3, 329][3, 329, 9][3, 329, 95][3, 329, 959][3, 329, 9595][3, 329, 95951][3, 329, 959514][3, 3329][3, 3329, 9][3, 3329, 99][3, 3329, 995][3, 3329, 9959][3, 3329, 99599][3, 3329, 995995][3, 33329][3, 33329, 9][3, 33329, 99][3, 33329, 999][3, 33329, 9995][3, 33329, 99959][3, 33329, 999599][3, 333329][3, 333329, 9][3, 333329, 99][3, 333329, 999][3, 333329, 9999][3, 333329, 99996][3, 333329, 999960]</code></pre></div></div><p>Here we can see that the first term must be a 3 to continue, 10 works at first but immediately dies out. The second term also is quite interesting as it looks like it must be 29, 329, 3329, and so on.</p><p>This is already a useful result in that we can generalize and say that we can find a pre trott constant that is equal up to any N. (If we wanted a pre trott that is equal to 20 digits we could just have <code class=\"highlighter-rouge\">[0; 3, 333333333333333329]</code>.)</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"mi\">29</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">20</span><span class=\"p\">):</span>    <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">prev</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">3</span> <span class=\"o\">*</span> <span class=\"mi\">10</span> <span class=\"o\">**</span> <span class=\"n\">i</span><span class=\"p\">)]</span>    <span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">prev</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">3</span> <span class=\"o\">*</span> <span class=\"mi\">10</span> <span class=\"o\">**</span> <span class=\"n\">i</span><span class=\"p\">)</span>    <span class=\"k\">if</span> <span class=\"n\">valid_trott</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">):</span>        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"c1\"># print only the valid approximations</span></code></pre></div></div><p>output:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[3, 329][3, 3329][3, 33329][3, 333329][3, 3333329][3, 33333329][3, 333333329][3, 3333333329][3, 33333333329][3, 333333333329][3, 3333333333329][3, 33333333333329][3, 333333333333329][3, 3333333333333329][3, 33333333333333329][3, 333333333333333329][3, 3333333333333333329]</code></pre></div></div><p>The above is just a way to show that the repeating 3s at the beginning are valid pre trotts.</p><h2 id=\"backtracking-solution\">Backtracking Solution</h2><blockquote>  <p>backtracking is the best way to do a brute force for all permutations in a general case.</p></blockquote><p>Here we will take what we do in each of the for-loops in the code above and call this function recursively. I will set more limiting restrictions on this version as the above code actually does take a bit of time to run just for 3 items of in the range of <code class=\"highlighter-rouge\">[1, 1000000]</code>.</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">trott_backtracking</span><span class=\"p\">(</span><span class=\"n\">current_cf</span><span class=\"p\">,</span> <span class=\"n\">count</span><span class=\"p\">,</span> <span class=\"n\">max_items</span><span class=\"p\">,</span> <span class=\"n\">max_size</span><span class=\"p\">,</span> <span class=\"nb\">file</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>    <span class=\"k\">if</span> <span class=\"n\">count</span> <span class=\"o\">&lt;</span> <span class=\"n\">max_items</span><span class=\"p\">:</span>        <span class=\"n\">valid</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>        <span class=\"k\">for</span> <span class=\"n\">a</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">max_size</span><span class=\"p\">):</span>            <span class=\"n\">new_cf</span> <span class=\"o\">=</span> <span class=\"n\">current_cf</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">]</span>            <span class=\"k\">if</span> <span class=\"n\">valid_trott</span><span class=\"p\">(</span><span class=\"n\">new_cf</span><span class=\"p\">):</span>                <span class=\"n\">valid</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">new_cf</span><span class=\"p\">)</span>        <span class=\"k\">if</span> <span class=\"n\">valid</span><span class=\"p\">:</span>            <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">valid</span><span class=\"p\">:</span>                <span class=\"c1\"># These branches are still alive</span>                <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"VALID: {}\"</span><span class=\"o\">.</span><span class=\"nb\">format</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)),</span> <span class=\"nb\">file</span><span class=\"o\">=</span><span class=\"nb\">file</span><span class=\"p\">)</span>                <span class=\"n\">trott_backtracking</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">count</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">max_items</span><span class=\"p\">,</span> <span class=\"n\">max_size</span><span class=\"p\">,</span> <span class=\"nb\">file</span><span class=\"o\">=</span><span class=\"nb\">file</span><span class=\"p\">)</span></code></pre></div></div><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s\">\"output1.txt\"</span><span class=\"p\">,</span> <span class=\"s\">\"w+\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">out</span><span class=\"p\">:</span>    <span class=\"n\">trott_backtracking</span><span class=\"p\">([],</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"n\">out</span><span class=\"p\">)</span></code></pre></div></div><p>Since the output was long I moved it to another file but it can be seen in <code class=\"highlighter-rouge\">output1.txt</code>.</p><p>Now I just need to run this for much larger possible values.</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s\">\"output3.txt\"</span><span class=\"p\">,</span> <span class=\"s\">\"w+\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">out</span><span class=\"p\">:</span>    <span class=\"n\">trott_backtracking</span><span class=\"p\">([],</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">10000</span><span class=\"p\">,</span> <span class=\"n\">out</span><span class=\"p\">)</span></code></pre></div></div><h2 id=\"todo\">TODO</h2><p>There are a few improvements I want to add to the code soon. Currently it is only using one process and hence only one of my CPU cores.</p><ul class=\"task-list\">  <li class=\"task-list-item\"><input type=\"checkbox\" class=\"task-list-item-checkbox\" disabled=\"disabled\" />use <code class=\"highlighter-rouge\">multiprocessing</code> module to parallelize code</li>  <li class=\"task-list-item\"><input type=\"checkbox\" class=\"task-list-item-checkbox\" disabled=\"disabled\" />figure out a faster way to check for decimal equality than to convert to a string?</li></ul><p>That’s all for now. – Pry (Pranoy Dutta)</p>",
            "url": "https://prydt.xyz/b/2020/07/18/trott-constants.html",
            
            
            
            "tags": ["math","research"],
            
            "date_published": "2020-07-18T00:00:00-05:00",
            "date_modified": "2020-07-18T00:00:00-05:00",
            
                "author":  {
                "name": "Pranoy Dutta",
                "url": "https://prydt.xyz",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://prydt.xyz/b/2020/07/12/breakfast-of-champions.html",
            "title": "Breakfast of Champions Review",
            "summary": "My thoughts on a Kurt Vonnegut Novel.",
            "content_text": "I haven’t been reading much lately.But I did finish Breakfast of Champions by Kurt Vonnegut finally and it was an interesting novel.I’ve been a fan of his work for a while already and loved Slaughterhouse Five and The Sirens of Titan both of which were unconventional sci-fi stories.Breakfast of Champions on the other hand is a more down to Earth novel but still has many distinct qualities of Vonnegut’s writing peppered in.The story revolves around Kilgore Trout (a sci-fi author) and as such is jam packed with 1-page descriptions of books that Trout had written.The story focuses on the build up of a single event: a mentally ill man finally snaps because of a solipsistic Trout novel and goes on a rampage.It is less about the event but about the surrounding characters and their environment; Vonnegut describes the local high schools in the area, the adult correction facility which many African Americans and “gays” are sent to.Vonnegut describes American in its glory and folly, a land of freedom and opportunity for some. The most sad thing about the novel is that while the novel was published in 1973, all of Vonnegut’s criticisms of America hold true more than ever. Racism, sexism, and inequality are all still large problems that need fixing in 2020. Overall I would say the satrical and witty comedy is worth a read and still ends with a touch of hope as it shows that even a single person (Kilgore Trout in this case), can cause change in magnitudes.Rating: 7/10, not my favorite Vonnegut book but definitely worth your time.– pry",
            "content_html": "<p>I haven’t been reading much lately.But I did finish Breakfast of Champions by Kurt Vonnegut finally and it was an interesting novel.I’ve been a fan of his work for a while already and loved Slaughterhouse Five and The Sirens of Titan both of which were unconventional sci-fi stories.</p><p>Breakfast of Champions on the other hand is a more down to Earth novel but still has many distinct qualities of Vonnegut’s writing peppered in.The story revolves around Kilgore Trout (a sci-fi author) and as such is jam packed with 1-page descriptions of books that Trout had written.</p><p>The story focuses on the build up of a single event: a mentally ill man finally snaps because of a solipsistic Trout novel and goes on a rampage.It is less about the event but about the surrounding characters and their environment; Vonnegut describes the local high schools in the area, the adult correction facility which many African Americans and “gays” are sent to.</p><p>Vonnegut describes American in its glory and folly, a land of freedom and opportunity for some. The most sad thing about the novel is that while the novel was published in 1973, all of Vonnegut’s criticisms of America hold true more than ever. Racism, sexism, and inequality are all still large problems that need fixing in 2020. Overall I would say the satrical and witty comedy is worth a read and still ends with a touch of hope as it shows that even a single person (Kilgore Trout in this case), can cause change in magnitudes.</p><p>Rating: 7/10, not my favorite Vonnegut book but definitely worth your time.</p><p>– pry</p>",
            "url": "https://prydt.xyz/b/2020/07/12/breakfast-of-champions.html",
            
            
            
            
            
            "date_published": "2020-07-12T00:00:00-05:00",
            "date_modified": "2020-07-12T00:00:00-05:00",
            
                "author":  {
                "name": "Pranoy Dutta",
                "url": "https://prydt.xyz",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://prydt.xyz/b/2020/06/16/installing-spike.html",
            "title": "Installing the Spike RISC-V Simulator",
            "summary": "How to install Spike on a Linux distro",
            "content_text": "Spike is a RISC-V Simulator. Here are the steps to installing Spike from source for 32bit simulation.Dependencies:  Device Tree Compiler# Arch Linuxsudo pacman -S dtc# Ubuntu / Debiansudo apt install device-tree-compilerInstalling SpikeMake a new directory for Spikemkdir RISCVcd RISCVClone the repos for the RISCV GNU toolchain, proxy kernel (pk), and Spike itselfgit clone --recursive https://github.com/riscv/riscv-gnu-toolchaingit clone https://github.com/riscv/riscv-pkgit clone https://github.com/riscv/riscv-isa-simSet environment variables (preferably move these commands into bashrc, zshrc, or something similar)export RISCV=/path/from/home/to/RISCVexport PATH=$PATH:$RISCV/binBuild the toolchain (this will take a while so make some tea or something)cd riscv-gnu-toolchainmkdir buildcd build../configure --prefix=$RISCV --with-arch=rv32imakeNow, to build the Proxy Kernelcd ../riscv-pkmkdir buildcd build../configure --prefix=$RISCV --host=riscv32-unknown-elfmakemake installFinally to build Spikecd ../riscv-isa-simmkdir buildcd build../configure --prefix=$RISCV --enable-histogrammakemake installYou are done!! To test if your install is working correctly use the following:riscv32-unknown-elf-gcc helloworld.c # where helloworld.c is any C programRISCV/riscv-isa-sim/build/spike --isa=RV32IMAC RISCV/riscv-pk/build/pk a.out",
            "content_html": "<p>Spike is a RISC-V Simulator. Here are the steps to installing Spike from source for 32bit simulation.</p><p>Dependencies:</p><ul>  <li>Device Tree Compiler</li></ul><pre><code class=\"language-commandline\"># Arch Linuxsudo pacman -S dtc# Ubuntu / Debiansudo apt install device-tree-compiler</code></pre><p>Installing Spike</p><p>Make a new directory for Spike</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mkdir RISCVcd RISCV</code></pre></div></div><p>Clone the repos for the RISCV GNU toolchain, proxy kernel (pk), and Spike itself</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git clone --recursive https://github.com/riscv/riscv-gnu-toolchaingit clone https://github.com/riscv/riscv-pkgit clone https://github.com/riscv/riscv-isa-sim</code></pre></div></div><p>Set environment variables (preferably move these commands into bashrc, zshrc, or something similar)</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>export RISCV=/path/from/home/to/RISCVexport PATH=$PATH:$RISCV/bin</code></pre></div></div><p>Build the toolchain (this will take a while so make some tea or something)</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>cd riscv-gnu-toolchainmkdir buildcd build../configure --prefix=$RISCV --with-arch=rv32imake</code></pre></div></div><p>Now, to build the Proxy Kernel</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>cd ../riscv-pkmkdir buildcd build../configure --prefix=$RISCV --host=riscv32-unknown-elfmakemake install</code></pre></div></div><p>Finally to build Spike</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>cd ../riscv-isa-simmkdir buildcd build../configure --prefix=$RISCV --enable-histogrammakemake install</code></pre></div></div><p>You are done!! To test if your install is working correctly use the following:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>riscv32-unknown-elf-gcc helloworld.c # where helloworld.c is any C programRISCV/riscv-isa-sim/build/spike --isa=RV32IMAC RISCV/riscv-pk/build/pk a.out</code></pre></div></div>",
            "url": "https://prydt.xyz/b/2020/06/16/installing-spike.html",
            
            
            
            "tags": ["riscv","linux"],
            
            "date_published": "2020-06-16T00:00:00-05:00",
            "date_modified": "2020-06-16T00:00:00-05:00",
            
                "author":  {
                "name": "Pranoy Dutta",
                "url": "https://prydt.xyz",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://prydt.xyz/b/2020/05/31/making-a-blog.html",
            "title": "Introductions | Making a Blog!",
            "summary": "An Introduction",
            "content_text": "I’m committing to writing a blog. This may or may not be my 3rd attempt and I’m just going to go and stick with it. I think that’s the best course of action. Previously, I was too caught up with what static site generator to use or exactly what to post and this time I’m just sticking with something basic and will continue.My set up for blogging is rather simple. I’m using Jekyll which is not the newest or flashiest static site generator but it gets the job done. The theme I am using is called Sidey and I personally think it looks amazing.I suppose that’s it for now. This is just the first post.– pry",
            "content_html": "<p>I’m committing to writing a blog. This may or may not be my 3rd attempt and I’m just going to go and stick with it. I think that’s the best course of action. Previously, I was too caught up with what static site generator to use or exactly what to post and this time I’m just sticking with something basic and will continue.</p><p>My set up for blogging is rather simple. I’m using <a href=\"https://jekyllrb.com/\">Jekyll</a> which is not the newest or flashiest static site generator but it gets the job done. The theme I am using is called <a href=\"https://github.com/ronv/sidey\">Sidey</a> and I personally think it looks amazing.</p><p>I suppose that’s it for now. This is just the first post.</p><p>– pry</p>",
            "url": "https://prydt.xyz/b/2020/05/31/making-a-blog.html",
            
            
            
            "tags": ["blogging","jekyll"],
            
            "date_published": "2020-05-31T00:00:00-05:00",
            "date_modified": "2020-05-31T00:00:00-05:00",
            
                "author":  {
                "name": "Pranoy Dutta",
                "url": "https://prydt.xyz",
                "avatar": null
                }
                
            
        }
    
    ]
}